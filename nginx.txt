#lua_package_path "/path/to/lua-resty-logger-socket/lib/?.lua;;";


worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}


http {
    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;

#-------
 #location / {
       #     default_type text/html;

      #      content_by_lua_block {
        #        ngx.say("HelloWorld")
        #    }
       # }

#-------
 location = /sum {
    # 只允许内部调用
    internal;

    # 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、
    # 缓存服务器的操作，达到基础模块和业务逻辑分离目的
    content_by_lua_block {
        local args = ngx.req.get_uri_args()
        ngx.say(tonumber(args.a) + tonumber(args.b))
    }
}

location = /app/test {
    content_by_lua_block {
        local res = ngx.location.capture(
                        "/sum", {args={a=3, b=8}}
                        )
        ngx.say("status:", res.status, " response:", res.body)
    }
}
  
  #-------
  location = /suma {
    internal;
    content_by_lua_block {
        ngx.sleep(0.1)
        local args = ngx.req.get_uri_args()
        ngx.print(tonumber(args.a) + tonumber(args.b))
    }
}

location = /subduction {
    internal;
    content_by_lua_block {
        ngx.sleep(0.1)
        local args = ngx.req.get_uri_args()
        ngx.print(tonumber(args.a) - tonumber(args.b))
    }
}

location = /app/test_parallels {
    content_by_lua_block {
        local start_time = ngx.now()
        local res1, res2 = ngx.location.capture_multi( {
                        {"/sum", {args={a=3, b=8}}},
                        {"/subduction", {args={a=3, b=8}}}
                    })
        ngx.say("status:", res1.status, " response:", res1.body)
        ngx.say("status:", res2.status, " response:", res2.body)
        ngx.say("time used:", ngx.now() - start_time)
    }
}

location = /app/test_queue {
    content_by_lua_block {
        local start_time = ngx.now()
        local res1 = ngx.location.capture_multi( {
                        {"/sum", {args={a=3, b=8}}}
                    })
        local res2 = ngx.location.capture_multi( {
                        {"/subduction", {args={a=3, b=8}}}
                    })
        ngx.say("status:", res1.status, " response:", res1.body)
        ngx.say("status:", res2.status, " response:", res2.body)
        ngx.say("time used:", ngx.now() - start_time)
    }
}
  
  #---------
  
  location ~ ^/static/([-_a-zA-Z0-9/]+).jpg {
    set $image_name $1;
    content_by_lua_block {

        
        ngx.exec("/download_internal/images/"
                .. ngx.var.image_name .. ".jpg");
 ngx.say(ngx.var.image_name);
                   

    }
}

location /download_internal {
    internal;
    # 这里还可以有其他统一的 download 下载设置，例如限速等
    alias ../download;
    content_by_lua_block {
        ngx.say("lllllkkkk");
     }
}

#--------
  
  
  location = /foo {
    content_by_lua_block {
        ngx.say([[I am foo]])
    }
}

location = / {
    rewrite_by_lua_block {
        return ngx.redirect('/foo');
    }
}

#------
   location /print_param {
       content_by_lua_block {
           local arg = ngx.req.get_uri_args()
           for k,v in pairs(arg) do
               ngx.say("[GET ] key:", k, " v:", v)
           end

           ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
           local arg = ngx.req.get_post_args()
           for k,v in pairs(arg) do
               ngx.say("[POST] key:", k, " v:", v)
           end
       }
   }

   #-------
  location /test {
       content_by_lua_block {
           local res = ngx.location.capture(
                    '/print_param',
                    {
                       method = ngx.HTTP_POST,
                       args = ngx.encode_args({a = 1, b = '2&'}),
                       body = ngx.encode_args({c = 3, d = '4&'})
                   }
                )
          ngx.say(res.body)
       }


       #----
       # content_by_lua_block {
       #  local res1 = ngx.location.capture('/print_param',
             #    {
                  #   method = ngx.HTTP_POST,
                  #   args = 'a=1&b=2%26',  -- 注意这里的 %26 ,代表的是 & 字符
                   #  body = 'c=3&d=4%26'
               #  }
           #  )
               # ngx.say(res2.body)
              #   }
        
           #  }

        #---

     #    content_by_lua_block {
      #   local res2 = ngx.location.capture('/print_param',
            #     {
          #           method = ngx.HTTP_POST,
           #          args = {a = 1, b = '2&'},
              #       body = 'c=3&d=4%26'
          #       }
        #     )
            #ngx.say(res2.body)

      #   }

   }
    }




    server {
        listen    80;
 		# 默认读取 body
    # lua_need_request_body on;
        location /test2 {
            content_by_lua_block {
                local data = ngx.req.get_body_data()
                ngx.say("hello ", data)
            }
        }

  location /test1 {
            content_by_lua_block {
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                ngx.say("hello ", data)
            }
        }

    }



    server {
        listen    81;

        # 强制请求 body 到临时文件中（仅仅为了演示）
        client_body_in_file_only on;

        location /test {
            content_by_lua_block {
                function getFile(file_name)
                    local f = assert(io.open(file_name, 'r'))
                    local string = f:read("*all")
                    f:close()
                    return string
                end

                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if nil == data then
                    local file_name = ngx.req.get_body_file()
                    ngx.say(">> temp file: ", file_name)
                    if file_name then
                        data = getFile(file_name)
                    end
                end

                ngx.say("hello ", data)
            }
        }
#------
 location /testa {
            content_by_lua_block {
                ngx.say("hello")
                ngx.sleep(3)
                ngx.say("the world")
            }
        }

        location /testb {
            content_by_lua_block {
                ngx.say("hello")
                ngx.flush() -- 显式的向客户端刷新响应输出
                ngx.sleep(3)
                ngx.say("the world")
            }
        }


 #lua_code_cache off;

        location /testc {
            content_by_lua_block {
                ngx.say(string.rep("hello", 1000))
                ngx.sleep(3)
                ngx.say("the world")
                              }
        }

        #--------
location /testd {
    content_by_lua_block {
        -- ngx.var.limit_rate = 1024*1024
       
        local file, err = io.open(ngx.config.prefix() .. "/html/index.html","r")
        if not file then
            ngx.log(ngx.ERR, "open file error:", err)
            ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
        end

        local data
        while true do
            data = file:read(100)
            if nil == data then
                break
            end
            ngx.print(data)
            ngx.flush(true)
        end
        file:close()
   

local table = {
     "hello, ",
     {"world: ", true, " or ", false,
         {": ", nil}}
 }
 ngx.print(table)
 }

}

#-----
location /testf {

    autoindex on;#打开目录列表
    autoindex_exact_size off; #on显示文件的确切大小，off则会用M、G等单位
    autoindex_localtime on; #显示文件服务器时间，off显示GMT时间
    root   html;
    index  index.html index.htm;
}

 location /teste {
            content_by_lua_block {
                local num = 55
                local str = "string"
                local obj
                ngx.log(ngx.ERR, "num:", num)
                ngx.log(ngx.INFO, " string:", str)
                print([[i am print]])
                ngx.log(ngx.ERR, " object:", obj)
            }
        }
location /decode_info {
            body_filter_by_lua_file /home/linuxzjq/workspace/test/lua/decode_info.lua;
        }


内存〉SSD〉机械磁盘
本机〉网络
进程内〉进程间

nginx 负责均衡、反向代理
C model

lua

luaJIT+nginx=openresty
 location /testf {
            log_by_lua '
                local logger = require "resty.logger.socket"
                if not logger.initted() then
                    local ok, err = logger.init{
                        host = 'xxx',
                        port = 1234,
                        flush_limit = 1234,
                        drop_limit = 5678,
                    }
                    if not ok then
                        ngx.log(ngx.ERR, "failed to initialize the logger: ",
                                err)
                        return
                    end
                end

                -- construct the custom access log message in
                -- the Lua variable "msg"

                local bytes, err = logger.log(msg)
                if err then
                    ngx.log(ngx.ERR, "failed to log message: ", err)
                    return
                end
            ';
        }

        
location /funnn {

             body_filter_by_lua_file  /home/linuxzjq/workspace/test/lua/func.lua;
        }     


        location / {
        root html;
        index index.html index.htm;
        }
        
    }
}
